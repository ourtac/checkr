
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "checkr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('checkr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ensure")
> ### * ensure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensure
> ### Title: Ensure checks that certain preconditions and postconditions of a
> ###   function are true.
> ### Aliases: ensure
> 
> ### ** Examples
> 
>   add <- ensure(pre = list(x %is% numeric, y %is% numeric),
+     post = list(result %is% numeric),
+     function(x, y) { x + y })
> 
> 
> 
> cleanEx()
> nameEx("grapes-contains-grapes")
> ### * grapes-contains-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %contains%
> ### Title: Test if a list contains some elements of the desired class.
> ### Aliases: %contains% %contains_only%
> 
> ### ** Examples
> 
>   list(1, 2, 3) %contains% numeric
[1] TRUE
>   list(1, 2, "a") %contains% numeric
[1] TRUE
>   list(1, 2, 3) %contains_only% numeric
[1] TRUE
>   list(1, 2, "a") %contains_only% numeric
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("grapes-does_not_contain-grapes")
> ### * grapes-does_not_contain-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %does_not_contain%
> ### Title: Test if a list does not contain some elements of the desired
> ###   class.
> ### Aliases: %does_not_contain%
> 
> ### ** Examples
> 
>   list(1, 2, 3) %does_not_contain% character
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("grapes-is-grapes")
> ### * grapes-is-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %is%
> ### Title: Test for class membership
> ### Aliases: %is% %isnot%
> 
> ### ** Examples
> 
>   1 %is% numeric
[1] TRUE
>   1.0 %is% double
[1] TRUE
>   1L %is% integer
[1] TRUE
>   iris %is% dataframe
[1] TRUE
>   c("a", "b", "c") %is% vector
[1] TRUE
>   "pizza" %is% simple_string
[1] TRUE
>   list(a = "pizza", b = "pie") %is% c("character", "list")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is.empty")
> ### * is.empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.empty
> ### Title: Tests whether an object is empty.
> ### Aliases: is.empty
> 
> ### ** Examples
> 
>   is.empty(NULL)
[1] TRUE
>   is.empty(NA)
[1] TRUE
>   is.empty(list(NULL, NA))
[1] TRUE
>   is.empty(list())
[1] TRUE
>   is.empty(c())
[1] TRUE
>   is.empty(data.frame())
[1] TRUE
>   is.empty("")
[1] TRUE
>   is.empty(data.frame())
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is.simple_string")
> ### * is.simple_string
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.simple_string
> ### Title: Tests whether a string is simple.
> ### Aliases: is.simple_string
> 
> ### ** Examples
> 
>   is.simple_string("pizza")              # true
[1] TRUE
>   is.simple_string(c("pizza", "apple"))  # false
[1] FALSE
>   is.simple_string(iris)                 # false
[1] FALSE
>   is.simple_string(NA)                   # false
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("print_args")
> ### * print_args
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print_args
> ### Title: Print function arguments
> ### Aliases: print_args
> 
> ### ** Examples
> 
> l <- list(x = seq(3), y = seq(4))
> print_args(l)
Error: could not find function "print_args"
Execution halted
